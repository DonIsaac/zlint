const std = @import("std");
const gen = @import("./gen_utils.zig");

const fs = std.fs;

const OUT_FILE = "src/linter/config/rules_config.zig";

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();
    const out = try fs.cwd().createFile(OUT_FILE, .{});
    defer out.close();
    const w = out.writer();

    try w.writeAll(
        \\// Auto-generated by `tasks/confgen.zig`. Do not edit manually.
        \\const RuleConfig = @import("rule_config.zig").RuleConfig;
        \\const rules = @import("../rules.zig");
        \\
        \\pub const RulesConfig = struct {
        \\    pub usingnamespace @import("./rules_config.methods.zig").RulesConfigMethods(@This());
        \\
    );
    defer w.writeAll("};\n") catch @panic("failed to write closing curlies for RulesConfig.");

    for (gen.RuleInfo.all_rules) |rule_info| {
        const name = rule_info.meta.name;
        const snake_name = try allocator.dupe(u8, name);
        @memcpy(snake_name, name);
        std.mem.replaceScalar(u8, snake_name, '-', '_');

        // e.g. homeless_try: RuleConfig(rules.HomelessTry) = .{},
        try w.print(
            "    {s}: RuleConfig(rules.{s}) = .{{}},\n",
            .{ snake_name, rule_info.name_pascale },
        );
    }
}
