name: CI

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]
    paths-ignore:
      - "*.md"
      - ".vscode/*"
      - zls.json
      - ".github/workflows/*"
      - "!.github/workflows/ci.yaml"
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/*"
      - zls.json
      - ".github/workflows/*"
      - "!.github/workflows/ci.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ZIG_VERSION: 0.14.0

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Install tooling
      - uses: extractions/setup-just@v2
        with:
          just-version: ${{ env.JUST_VERSION }}
      - uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}
      # Run checks
      - run: just check

  build-debug:
    name: Build
    strategy:
      matrix:
        os: [linux, macos, windows]
        arch: [x86_64, aarch64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Install tooling
      - uses: extractions/setup-just@v2
      - uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}

      # Build
      - run: zig build --fetch
      - run: zig fmt src test/harness tasks build.zig build.zig.zon
      # - run: zig build check -Dtarget=${{ matrix.arch }}-${{ matrix.os }} -Dversion=${{ github.ref_name }}
      - run: |
          just build -Dtarget=${{ matrix.arch }}-${{ matrix.os }} 

      # upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          retention-days: 1
          compression-level: 2 # binaries don't compress well
          name: zlint-${{ matrix.os }}-${{ matrix.arch}}-${{ github.ref }}
          path: zig-out/bin/**
          overwrite: true

  test:
    name: Test
    needs: build-debug
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Install kcov
        if: ${{ matrix.os == 'ubuntu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y kcov
      # determine architecture
      - name: Get platform information
        id: cpu
        run: |
          arch=$(uname -m)
          if [[ "$arch" == "arm64" ]]; then
            echo "arch=aarch64" >> $GITHUB_ENV
          else
            echo "arch=x86_64" >> $GITHUB_ENV
          fi

          if [[ ${{ matrix.os }} == 'windows' ]]; then
            echo "os=linux" >> $GITHUB_ENV
          else
            echo "os=${{ matrix.os }}" >> $GITHUB_ENV
          fi

      # download compiled artifacts from build-debug for target platform
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: zlint-${{ steps.cpu.outputs.os }}-${{ steps.cpu.outputs.arch }}
          path: zig-out/bin
          merge-multiple: true

        # env:
        #   arch: ${{ steps.arch.outputs.architecture }}
        # with:
        #   name: zlint-${{ matrix.os }}-${{ env.arch }}-${{ github.ref }}
      - name: Test
        if: ${{ matrix.os != 'ubuntu' }}
        run: |
          ./zig-out/bin/test
          ./zig-out/bin/test-utils

      - name: Test with Coverage
        if: ${{ matrix.os == 'ubuntu' }}
        run: |
          mkdir -p ./.coverage
          kcov --include-path=src,test, ./.coverage/test zig-out/bin/test 
          kcov --include-path=src,test, ./.coverage/test-utils zig-out/bin/test-utils
          kcov --merge ./.coverage/unit-test ./.coverage/test ./.coverage/test-utils
      - name: Upload Coverage
        if: ${{ matrix.os == 'ubuntu' }}
        uses: codecov/codecov-action@v4
        with:
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}


  # test:
  #   name: Test
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     # Install tooling
  #     - uses: extractions/setup-just@v2
  #     - uses: mlugg/setup-zig@v1
  #       with:
  #         version: ${{ env.ZIG_VERSION }}
  #     # Run tests
  #     - run: zig build --fetch
  #     - run: zig build test --summary all -freference-trace --color on

  # https://imgflip.com/i/9eygz0
  lint:
    name: Lint Changed
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Install tooling
      - uses: extractions/setup-just@v2
      - uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}
      - run: zig build --fetch
      - run: zig build
      - uses: DonIsaac/zlint-action@v0
        with:
          binary: ./zig-out/bin/zlint

  e2e:
    name: Test E2E
    runs-on: ubuntu-latest
    strategy:
      matrix:
        optimize: ["Debug", "ReleaseSafe", "ReleaseFast"]
    steps:
      - uses: actions/checkout@v4
      # Install tooling
      - uses: extractions/setup-just@v2
      - uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}
      - run: rm -rf ~/.cache/zig
      - run: zig build --fetch
      - run: just submodules
      - run: just e2e -Doptimize=${{ matrix.optimize }}
      - name: Check for changes
        run: git diff --exit-code

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Install tooling
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - uses: extractions/setup-just@v2
      - uses: mlugg/setup-zig@v1
        with:
          version: ${{ env.ZIG_VERSION }}
      - run: just docs
      - name: Check for changes
        run: git diff --exit-code
