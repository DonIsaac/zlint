"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[8030],{8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},8797:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rules/allocator-first-param","title":"allocator-first-param","description":"What This Rule Does","source":"@site/docs/rules/allocator-first-param.mdx","sourceDirName":"rules","slug":"/rules/allocator-first-param","permalink":"/zlint/docs/rules/allocator-first-param","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/allocator-first-param.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Rules","permalink":"/zlint/docs/category/rules"},"next":{"title":"avoid-as","permalink":"/zlint/docs/rules/avoid-as"}}');var o=r(4848),s=r(8453);const l={},a="allocator-first-param",i={},c=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Rule Details",id:"rule-details",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{RuleBanner:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"allocator-first-param",children:(0,o.jsx)(n.code,{children:"allocator-first-param"})})}),"\n",(0,o.jsx)(r,{category:"style",default:"off"}),"\n",(0,o.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,o.jsx)(n.p,{children:"Checks that functions taking allocators as parameters have the allocator as\nthe first parameter. This conforms to common Zig conventions."}),"\n",(0,o.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,o.jsxs)(n.p,{children:["This rule looks for functions take an ",(0,o.jsx)(n.code,{children:"Allocator"})," parameter and reports a\nviolation if"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"it is not the first parameter, or"}),"\n",(0,o.jsxs)(n.li,{children:["there is a ",(0,o.jsx)(n.code,{children:"self"})," parameter, and the allocator does not immediately follow it."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Parameters are considered to be an allocator if"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["the are named ",(0,o.jsx)(n.code,{children:"allocator"}),", ",(0,o.jsx)(n.code,{children:"alloc"}),", ",(0,o.jsx)(n.code,{children:"gpa"}),", or ",(0,o.jsx)(n.code,{children:"arena"}),", or one of those\nwith leading/trailing underscores,"]}),"\n",(0,o.jsxs)(n.li,{children:["their type ends with ",(0,o.jsx)(n.code,{children:"Allocator"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Parameters are considered to be a ",(0,o.jsx)(n.code,{children:"self"})," parameter if"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["they are named ",(0,o.jsx)(n.code,{children:"self"}),", ",(0,o.jsx)(n.code,{children:"this"}),", or one of those with leading/trailing underscores."]}),"\n",(0,o.jsxs)(n.li,{children:["their type is ",(0,o.jsx)(n.code,{children:"@This()"}),", ",(0,o.jsx)(n.code,{children:"*@This()"}),", etc."]}),"\n",(0,o.jsx)(n.li,{children:"their type is a Capitalized and the function is within the definition of a\nsimilarly named container (e.g. a struct)."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"fn foo(x: u32, allocator: Allocator) !*u32 {\n  const heap_x = try allocator.create(u32);\n  heap_x.* = x;\n  return heap_x;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"fn foo(allocator: Allocator, x: u32) !*u32 {\n  const heap_x = try allocator.create(u32);\n  heap_x.* = x;\n  return heap_x;\n}\nconst Foo = struct {\n  list: std.ArrayListUnmanaged(u32) = .{},\n  // when writing methods, `self` must be the first parameter\n  pub fn expandCapacity(self: *Foo, allocator: Allocator, new_len: usize) !void {\n    try self.list.ensureTotalCapacity(allocator, new_len);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"This rule accepts the following options:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"ignore: array"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);