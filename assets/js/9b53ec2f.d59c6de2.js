"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[5926],{1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(4041);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9775:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rules/no-print","title":"no-print","description":"What This Rule Does","source":"@site/docs/rules/no-print.mdx","sourceDirName":"rules","slug":"/rules/no-print","permalink":"/zlint/docs/rules/no-print","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/no-print.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"no-catch-return","permalink":"/zlint/docs/rules/no-catch-return"},"next":{"title":"no-return-try","permalink":"/zlint/docs/rules/no-return-try"}}');var r=t(1085),i=t(1184);const o={},l="no-print",d={},c=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Tests",id:"tests",level:3},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{RuleBanner:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"no-print",children:(0,r.jsx)(n.code,{children:"no-print"})})}),"\n",(0,r.jsx)(t,{category:"restriction",default:"warning"}),"\n",(0,r.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,r.jsxs)(n.p,{children:["Disallows the use of ",(0,r.jsx)(n.code,{children:"std.debug.print"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"print"})," statements are great for debugging, but they should be removed\nbefore code gets merged. When you need debug logs in production, use\n",(0,r.jsx)(n.code,{children:"std.log"})," instead."]}),"\n",(0,r.jsxs)(n.p,{children:["This rule makes a best-effort attempt to ensure ",(0,r.jsx)(n.code,{children:"print"})," calls are actually\nfrom ",(0,r.jsx)(n.code,{children:"std.debug.print"}),". It will not report calls to custom print functions\nif they are defined within the same file. If you are getting false positives\nbecause you import a custom print function, consider disabling this rule on\na file-by-file basis instead of turning it off globally."]}),"\n",(0,r.jsx)(n.h3,{id:"tests",children:"Tests"}),"\n",(0,r.jsxs)(n.p,{children:["By default, this rule ignores ",(0,r.jsx)(n.code,{children:"print"}),"s in test blocks and files. Files are\nconsidered to be a test file if they end with ",(0,r.jsx)(n.code,{children:"test.zig"}),". You may disable\nthis by setting ",(0,r.jsx)(n.code,{children:"allow_tests"})," to ",(0,r.jsx)(n.code,{children:"false"})," in the rule's metadata."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "rules": {\n    "no-print": ["warn", { "allow_tests": false }]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["Examples of ",(0,r.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nconst debug = std.debug;\nconst print = std.debug.print;\nfn main() void {\n    std.debug.print("This should not be here: {d}\\n", .{42});\n    debug.print("This should not be here: {d}\\n", .{42});\n    print("This should not be here: {d}\\n", .{42});\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Examples of ",(0,r.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nfn foo() u32 {\n    std.log.debug("running foo", .{});\n    return 1;\n}\n\ntest foo {\n    std.debug.print("testing foo\\n", .{});\n    try std.testing.expectEqual(1, foo());\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'fn print(comptime msg: []const u8, args: anytype) void {\n    // ...\n}\nfn main() void {\n    print("Staring program", .{});\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"This rule accepts the following options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"allow_tests: boolean"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);