"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[6368],{1184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(4041);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}},2543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"rules/case-convention","title":"case-convention","description":"What This Rule Does","source":"@site/docs/rules/case-convention.mdx","sourceDirName":"rules","slug":"/rules/case-convention","permalink":"/zlint/docs/rules/case-convention","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/case-convention.mdx","tags":[],"version":"current","frontMatter":{"rule":"{\\"name\\":\\"case-convention\\",\\"category\\":\\"style\\",\\"default\\":\\"off\\",\\"fix\\":{\\"kind\\":\\"none\\",\\"dangerous\\":false}}"},"sidebar":"docs","previous":{"title":"avoid-as","permalink":"/zlint/docs/rules/avoid-as"},"next":{"title":"empty-file","permalink":"/zlint/docs/rules/empty-file"}}');var o=t(1085),i=t(1184);const c={rule:'{"name":"case-convention","category":"style","default":"off","fix":{"kind":"none","dangerous":false}}'},r="case-convention",a={},l=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Functions",id:"functions",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{RuleBanner:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"case-convention",children:(0,o.jsx)(n.code,{children:"case-convention"})})}),"\n",(0,o.jsx)(t,{category:"style",default:"off"}),"\n",(0,o.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,o.jsx)(n.p,{children:"Enforces Zig's naming convention."}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Only functions are checked at this time."})}),"\n",(0,o.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsx)(n.p,{children:"In general, functions that return values should use camelCase names while\nthose that return types should use PascalCase. Specially coming from Rust,\nsome people may be used to use snake_case for their functions, which can\nlead to inconsistencies in the code."}),"\n",(0,o.jsxs)(n.p,{children:["Note that ",(0,o.jsx)(n.code,{children:"extern"})," functions are not checked since you cannot change\ntheir names."]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"fn this_one_is_in_snake_case() void {}\nfn generic(T: type) T { return T{}; }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"fn thisFunctionIsInCamelCase() void {}\nfn Generic(T: type) T { return T{}; }\nextern fn this_is_declared_in_c() void;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"This rule has no configuration."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);