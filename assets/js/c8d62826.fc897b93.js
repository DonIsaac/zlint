"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[5302],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},8852:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rules/avoid-as","title":"avoid-as","description":"Category: pedantic","source":"@site/docs/rules/avoid-as.md","sourceDirName":"rules","slug":"/rules/avoid-as","permalink":"/zlint/docs/rules/avoid-as","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/avoid-as.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Rules","permalink":"/zlint/docs/category/rules"},"next":{"title":"case-convention","permalink":"/zlint/docs/rules/case-convention"}}');var o=s(4848),r=s(8453);const i={},a="avoid-as",c={},l=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"avoid-as",children:(0,o.jsx)(n.code,{children:"avoid-as"})})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Category: pedantic"}),"\n",(0,o.jsx)(n.p,{children:"Enabled by default?: Yes (warning)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,o.jsxs)(n.p,{children:["Disallows using ",(0,o.jsx)(n.code,{children:"@as()"})," when types can be otherwise inferred."]}),"\n",(0,o.jsxs)(n.p,{children:["Zig has powerful ",(0,o.jsx)(n.a,{href:"https://ziglang.org/documentation/master/#Result-Location-Semantics",children:"Result Location Semantics"})," for inferring what type\nsomething should be. This happens in function parameters, return types,\nand type annotations. ",(0,o.jsx)(n.code,{children:"@as()"})," is a last resort when no other contextual\ninformation is available. In any other case, other type inference mechanisms\nshould be used."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"[!NOTE]\nChecks for function parameters and return types are not yet implemented."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"const x = @as(u32, 1);\n\nfn foo(x: u32) u64 {\n  return @as(u64, x); // type is inferred from return type\n}\nfoo(@as(u32, 1)); // type is inferred from function signature\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Examples of ",(0,o.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"const x: u32 = 1;\n\nfn foo(x: u32) void {\n  // ...\n}\nfoo(1);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"This rule has no configuration."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);