"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[8155],{1935:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rules/must-return-ref","title":"must-return-ref","description":"Category: suspicious","source":"@site/docs/rules/must-return-ref.md","sourceDirName":"rules","slug":"/rules/must-return-ref","permalink":"/zlint/docs/rules/must-return-ref","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rules/must-return-ref.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"line-length","permalink":"/zlint/docs/rules/line-length"},"next":{"title":"no-catch-return","permalink":"/zlint/docs/rules/no-catch-return"}}');var s=t(4848),o=t(8453);const i={},l="must-return-ref",a={},c=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function u(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"must-return-ref",children:(0,s.jsx)(n.code,{children:"must-return-ref"})})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Category: suspicious"}),"\n",(0,s.jsx)(n.p,{children:"Enabled by default?: Yes (warning)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,s.jsxs)(n.p,{children:["Disallows returning copies of types that store a ",(0,s.jsx)(n.code,{children:"capacity"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Zig does not have move semantics. Returning a value by value copies it.\nReturning a copy of a struct's field that records how much memory it has\nallocated can easily lead to memory leaks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\npub const Foo = struct {\n  list: std.ArrayList(u32),\n  pub fn getList(self: *Foo) std.ArrayList(u32) {\n      return self.list;\n  }\n};\n\npub fn main() !void {\n  var foo: Foo = .{\n    .list = try std.ArrayList(u32).init(std.heap.page_allocator)\n  };\n  defer foo.list.deinit();\n  var list = foo.getList();\n  try list.append(1); // leaked!\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"fn foo(self: *Foo) std.ArrayList(u32) {\n  return self.list;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"// pass by reference\nfn foo(self: *Foo) *std.ArrayList(u32) {\n  return &self.list;\n}\n\n// new instances are fine\nfn foo() ArenaAllocator {\n  return std.mem.ArenaAllocator.init(std.heap.page_allocator);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"This rule has no configuration."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);