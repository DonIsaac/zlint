"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[29],{1428:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rules/no-unresolved","title":"no-unresolved","description":"What This Rule Does","source":"@site/docs/rules/no-unresolved.mdx","sourceDirName":"rules","slug":"/rules/no-unresolved","permalink":"/zlint/docs/rules/no-unresolved","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/no-unresolved.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"no-return-try","permalink":"/zlint/docs/rules/no-return-try"},"next":{"title":"returned-stack-reference","permalink":"/zlint/docs/rules/returned-stack-reference"}}');var t=o(4848),s=o(8453);const i={},l="no-unresolved",c={},d=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{RuleBanner:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"no-unresolved",children:(0,t.jsx)(n.code,{children:"no-unresolved"})})}),"\n",(0,t.jsx)(o,{category:"correctness",default:"err"}),"\n",(0,t.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,t.jsx)(n.p,{children:"Checks for imports to files that do not exist."}),"\n",(0,t.jsxs)(n.p,{children:["This rule only checks for file-based imports. Modules added by ",(0,t.jsx)(n.code,{children:"build.zig"}),"\nare not checked. More precisely, imports to paths ending in ",(0,t.jsx)(n.code,{children:".zig"})," will be\nresolved. This rule checks that a file exists at the imported path and is\nnot a directory. Symlinks are allowed but are not followed."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Assume the following directory structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:".\n\u251c\u2500\u2500 foo.zig\n\u251c\u2500\u2500 mod\n\u2502   \u2514\u2500\u2500 bar.zig\n\u251c\u2500\u2500 not_a_file.zig\n\u2502   \u2514\u2500\u2500 baz.zig\n\u2514\u2500\u2500 root.zig\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Examples of ",(0,t.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// root.zig\nconst x = @import("mod/foo.zig");    // foo.zig is in the root directory.\nconst y = @import("not_a_file.zig"); // directory, not a file\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Examples of ",(0,t.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// root.zig\nconst x = @import("foo.zig");\nconst y = @import("mod/bar.zig");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"This rule has no configuration."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var r=o(6540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);