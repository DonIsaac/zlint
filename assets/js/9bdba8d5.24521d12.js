"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[7930],{1184:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(4041);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},5959:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"rules/unsafe-undefined","title":"unsafe-undefined","description":"What This Rule Does","source":"@site/docs/rules/unsafe-undefined.mdx","sourceDirName":"rules","slug":"/rules/unsafe-undefined","permalink":"/zlint/docs/rules/unsafe-undefined","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/unsafe-undefined.mdx","tags":[],"version":"current","frontMatter":{"rule":"{\\"name\\":\\"unsafe-undefined\\",\\"category\\":\\"restriction\\",\\"default\\":\\"warning\\",\\"fix\\":{\\"kind\\":\\"none\\",\\"dangerous\\":false}}"},"sidebar":"docs","previous":{"title":"suppressed-errors","permalink":"/zlint/docs/rules/suppressed-errors"},"next":{"title":"unused-decls","permalink":"/zlint/docs/rules/unused-decls"}}');var t=i(1085),o=i(1184);const r={rule:'{"name":"unsafe-undefined","category":"restriction","default":"warning","fix":{"kind":"none","dangerous":false}}'},l="unsafe-undefined",d={},a=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Allowed Scenarios",id:"allowed-scenarios",level:3},{value:"Arrays",id:"arrays",level:4},{value:"Whitelisting Types",id:"whitelisting-types",level:4},{value:"Destructors",id:"destructors",level:4},{value:"<code>test</code> blocks",id:"test-blocks",level:4},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{RuleBanner:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unsafe-undefined",children:(0,t.jsx)(n.code,{children:"unsafe-undefined"})})}),"\n",(0,t.jsx)(i,{category:"restriction",default:"warning"}),"\n",(0,t.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,t.jsxs)(n.p,{children:["Disallows initializing or assigning variables to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Reading uninitialized memory is one of the most common sources of undefined\nbehavior. While debug builds come with runtime safety checks for ",(0,t.jsx)(n.code,{children:"undefined"}),"\naccess, they are otherwise undetectable and will not cause panics in release\nbuilds."]}),"\n",(0,t.jsx)(n.h3,{id:"allowed-scenarios",children:"Allowed Scenarios"}),"\n",(0,t.jsxs)(n.p,{children:["There are some cases where using ",(0,t.jsx)(n.code,{children:"undefined"})," makes sense, such as array\ninitialization. Some cases are implicitly allowed, but others should be\ncommunicated to other programmers via a safety comment. Adding ",(0,t.jsx)(n.code,{children:"SAFETY: [reason]"})," before the line using ",(0,t.jsx)(n.code,{children:"undefined"})," will not trigger a rule\nviolation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"// SAFETY: foo is written to by `initializeFoo`, so `undefined` is never\n// read.\nvar foo: u32 = undefined\ninitializeFoo(&foo);\n\n// SAFETY: this covers the entire initialization\nconst bar: Bar = .{\n  .a = undefined,\n  .b = undefined,\n};\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Obviously unsafe usages of ",(0,t.jsx)(n.code,{children:"undefined"}),", such ",(0,t.jsx)(n.code,{children:"x == undefined"}),", are not\nallowed even in these exceptions."]})}),"\n",(0,t.jsx)(n.h4,{id:"arrays",children:"Arrays"}),"\n",(0,t.jsxs)(n.p,{children:["Array-typed variable declarations may be initialized to undefined.\nArray-typed container fields with ",(0,t.jsx)(n.code,{children:"undefined"})," as a default value will still\ntrigger a violation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"// arrays may be set to undefined without a safety comment\nvar arr: [10]u8 = undefined;\n@memset(&arr, 0);\n\n// This is not allowed\nconst Foo = struct {\n  foo: [4]u32 = undefined\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"whitelisting-types",children:"Whitelisting Types"}),"\n",(0,t.jsxs)(n.p,{children:["You may whitelist specific types that are allowed to be initialized to ",(0,t.jsx)(n.code,{children:"undefined"}),".\nAny variable with this type will not have a violation triggered, as long as\nthe type is obvious to ZLint's semantic analyzer. By default the whitelist\ncontains ",(0,t.jsx)(n.code,{children:"ThreadPool"}),"/",(0,t.jsx)(n.code,{children:"Thread.Pool"})," from ",(0,t.jsx)(n.code,{children:"std.Thread.Pool"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// "unsafe-undefined": ["error", { "allow_types": ["CustomBuffer"] }]\nconst CustomBuffer = [4096]u8;\nvar buf: CustomBuffer = undefined; // ok\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"ZLint does not have a type checker yet, so implicit struct initializations\nwill not be ignored."})}),"\n",(0,t.jsx)(n.h4,{id:"destructors",children:"Destructors"}),"\n",(0,t.jsxs)(n.p,{children:["Invalidating freed pointers/data by setting it to ",(0,t.jsx)(n.code,{children:"undefined"})," is helpful for\nfinding use-after-free bugs. Using ",(0,t.jsx)(n.code,{children:"undefined"})," in destructors will not trigger\na violation, unless it is obviously unsafe (e.g. in a comparison)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nconst Foo = struct {\n  data: []u8,\n  pub fn init(allocator: std.mem.Allocator) !Foo {\n     const data = try allocator.alloc(u8, 8);\n     return .{ .data = data };\n  }\n  pub fn deinit(self: *Foo, allocator: std.mem.Allocator) void {\n    allocator.free(self.data);\n    self.* = undefined; // safe\n  }\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"A method is considered a destructor if it is named"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"deinit"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"destroy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"reset"})}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"test-blocks",children:[(0,t.jsx)(n.code,{children:"test"})," blocks"]}),"\n",(0,t.jsxs)(n.p,{children:["All usages of ",(0,t.jsx)(n.code,{children:"undefined"})," in ",(0,t.jsx)(n.code,{children:"test"})," blocks are allowed. Code that isn't safe\nwill be caught by the test runner."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Examples of ",(0,t.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"const x = undefined;\n\n// Consumers of `Foo` should be forced to initialize `x`.\nconst Foo = struct {\n  x: *u32 = undefined,\n};\n\nvar y: *u32 = allocator.create(u32);\ny.* = undefined;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Examples of ",(0,t.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"const Foo = struct {\n  x: *u32,\n\n  fn init(allocator: *std.mem.Allocator, value: u32) void {\n    self.x = allocator.create(u32);\n    self.x.* = value;\n  }\n\n  // variables may be re-assigned to `undefined` in destructors\n  fn deinit(self: *Foo, alloc: std.mem.Allocator) void {\n    alloc.destroy(self.x);\n    self.x = undefined;\n  }\n};\n\ntest Foo {\n  // Allowed. If this is truly unsafe, it will be caught by the test.\n  var foo: Foo = undefined;\n  // ...\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"This rule accepts the following options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"allowed_types: array"}),"\n",(0,t.jsx)(n.li,{children:"allow_arrays: boolean"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);