"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[6543],{1184:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var o=n(4041);const s={},t=o.createContext(s);function l(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(t.Provider,{value:r},e.children)}},7354:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"rules/useless-error-return","title":"useless-error-return","description":"What This Rule Does","source":"@site/docs/rules/useless-error-return.mdx","sourceDirName":"rules","slug":"/rules/useless-error-return","permalink":"/zlint/docs/rules/useless-error-return","draft":false,"unlisted":false,"editUrl":"https://github.com/DonIsaac/zlint/tree/main/apps/site/docs/rules/useless-error-return.mdx","tags":[],"version":"current","frontMatter":{"rule":"{\\"name\\":\\"useless-error-return\\",\\"category\\":\\"suspicious\\",\\"default\\":\\"off\\",\\"fix\\":{\\"kind\\":\\"none\\",\\"dangerous\\":false}}"},"sidebar":"docs","previous":{"title":"unused-decls","permalink":"/zlint/docs/rules/unused-decls"}}');var s=n(1085),t=n(1184);const l={rule:'{"name":"useless-error-return","category":"suspicious","default":"off","fix":{"kind":"none","dangerous":false}}'},i="useless-error-return",u={},a=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{RuleBanner:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RuleBanner",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"useless-error-return",children:(0,s.jsx)(r.code,{children:"useless-error-return"})})}),"\n",(0,s.jsx)(n,{category:"suspicious",default:"off"}),"\n",(0,s.jsx)(r.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,s.jsx)(r.p,{children:"Detects functions that have an error union return type but never actually return an error.\nThis can happen in two ways:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The function never returns an error value"}),"\n",(0,s.jsx)(r.li,{children:"The function catches all errors internally and never propagates them to the caller"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Having an error union return type when errors are never returned makes the code less clear\nand forces callers to handle errors that will never occur."}),"\n",(0,s.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(r.p,{children:["Examples of ",(0,s.jsx)(r.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-zig",children:'// Function declares error return but only returns void\nfn foo() !void {\n    return;\n}\n\n// Function catches all errors internally\npub fn init(allocator: std.mem.Allocator) !Foo {\n    const new = allocator.create(Foo) catch @panic("OOM");\n    new.* = .{};\n    return new;\n}\n\n// Function only returns success value\nfn bar() !void {\n    const e = baz();\n    return e;\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Examples of ",(0,s.jsx)(r.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-zig",children:"// Function properly propagates errors\nfn foo() !void {\n    return error.Oops;\n}\n\n// Function returns result of fallible operation\nfn bar() !void {\n    return baz();\n}\n\n// Function propagates caught errors\nfn qux() !void {\n    bar() catch |e| return e;\n}\n\n// Function with conditional error return\nfn check(x: bool) !void {\n    return if (x) error.Invalid else {};\n}\n\n// Empty error set is explicitly allowed\nfn noErrors() error{}!void {}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(r.p,{children:"This rule has no configuration."})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);