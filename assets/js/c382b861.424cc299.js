"use strict";(self.webpackChunkzlint=self.webpackChunkzlint||[]).push([[422],{4550:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"rules/returned-stack-reference","title":"returned-stack-reference","description":"Category: nursery","source":"@site/docs/rules/returned-stack-reference.md","sourceDirName":"rules","slug":"/rules/returned-stack-reference","permalink":"/zlint/docs/rules/returned-stack-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rules/returned-stack-reference.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"no-unresolved","permalink":"/zlint/docs/rules/no-unresolved"},"next":{"title":"suppressed-errors","permalink":"/zlint/docs/rules/suppressed-errors"}}');var s=r(4848),o=r(8453);const c={},a="returned-stack-reference",l={},i=[{value:"What This Rule Does",id:"what-this-rule-does",level:2},{value:"Examples",id:"examples",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"returned-stack-reference",children:(0,s.jsx)(n.code,{children:"returned-stack-reference"})})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Category: nursery"}),"\n",(0,s.jsx)(n.p,{children:"Enabled by default?: No"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"what-this-rule-does",children:"What This Rule Does"}),"\n",(0,s.jsx)(n.p,{children:"Checks for functions that return references to stack-allocated memory."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"[!NOTE]\nThis rule is still in early development. PRs to improve it are welcome."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It is illegal to use stack-allocated memory outside of the function that\nallocated it. Once that function returns and the stack is popped, the memory\nis no longer valid and may cause segfaults or undefined behavior."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nfn foo() *u32 {\n  var x: u32 = 1; // x is on the stack\n  return &x;\n}\nfn bar() void {\n  const x = foo();\n  std.debug.print("{d}\\n", .{x}); // crashes\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"incorrect"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nfn foo() *u32 {\n  var x: u32 = 1;\n  return &x;\n}\nfn bar() []u32 {\n  var x: [1]u32 = .{1};\n  return x[0..];\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Examples of ",(0,s.jsx)(n.strong,{children:"correct"})," code for this rule:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"fn foo() *u32 {\n  var x = std.heap.page_allocator.create(u32);\n  x.* = 1;\n  return x;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"This rule has no configuration."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var t=r(6540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);