  𝙭 homeless-try: `try` cannot be used in functions that do not return errors.
   ╭─[homeless-try.zig:2:4]
 1 │ const std = @import("std");
 2 │ fn foo() void {
   ·    ─┬─
   ·     ╰── function `foo` is declared here.
 3 │   const x = try std.heap.page_allocator.alloc(u8, 8);
   ·             ─┬─
   ·              ╰── it cannot propagate error unions.
   ╰────
  help: Change the return type to `!void`.

  𝙭 homeless-try: `try` cannot be used outside of a function or test block.
   ╭─[homeless-try.zig:2:11]
 1 │ const std = @import("std");
 2 │ const x = try std.heap.page_allocator.alloc(u8, 8);
   ·           ─┬─
   ·            ╰── there is nowhere to propagate errors to.
   ╰────

  𝙭 homeless-try: `try` cannot be used outside of a function or test block.
   ╭─[homeless-try.zig:4:17]
 3 │   const Bar = struct {
 4 │     baz: []u8 = try std.heap.page_allocator.alloc(u8, 8),
   ·                 ─┬─
   ·                  ╰── there is nowhere to propagate errors to.
 5 │   };
   ╰────

  𝙭 homeless-try: `try` cannot be used in functions that do not return errors.
   ╭─[homeless-try.zig:2:8]
 1 │ const std = @import("std");
 2 │ pub fn push(list: std.ArrayList(u32), x: u32, comptime assume_capacity: bool) if(assume_capacity) void else void {
   ·        ──┬──
   ·          ╰── function `push` is declared here.
 3 │   if (comptime assume_capacity) {
 5 │   } else {
 6 │     try list.append(x);
   ·     ─┬─
   ·      ╰── it cannot propagate error unions.
 7 │   }
   ╰────
  help: Change the return type to `!if(assume_capacity) void else void`.

