  𝙭 suppressed-errors: `catch` statement suppresses errors
   ╭─[suppressed-errors.zig:2:9]
 1 │ fn foo() void {
 2 │   bar() catch {};
   ·         ────────
 3 │ }
   ╰────
  help: Handle this error or propagate it to the caller with `try`.

  𝙭 suppressed-errors: `catch` statement suppresses errors
   ╭─[suppressed-errors.zig:2:9]
 1 │ fn foo() void {
 2 │   bar() catch |_| {};
   ·         ────────────
 3 │ }
   ╰────
  help: Handle this error or propagate it to the caller with `try`.

  𝙭 suppressed-errors: `catch` statement suppresses errors
   ╭─[suppressed-errors.zig:2:9]
 1 │ fn foo() void {
 2 │   bar() catch {
   ·         ───────
 3 │     // ignore
   ╰────
  help: Handle this error or propagate it to the caller with `try`.

  𝙭 suppressed-errors: Caught error is mishandled with `unreachable`
   ╭─[suppressed-errors.zig:2:15]
 1 │ fn foo() void {
 2 │   bar() catch unreachable;
   ·               ───────────
 3 │ }
   ╰────
  help: Use `try` to propagate this error. If this branch shouldn't happen, use `@panic` or `std.debug.panic` instead.

  𝙭 suppressed-errors: Caught error is mishandled with `unreachable`
   ╭─[suppressed-errors.zig:2:17]
 1 │ fn foo() void {
 2 │   bar() catch { unreachable; };
   ·                 ───────────
 3 │ }
   ╰────
  help: Use `try` to propagate this error. If this branch shouldn't happen, use `@panic` or `std.debug.panic` instead.

  𝙭 suppressed-errors: Caught error is mishandled with `unreachable`
   ╭─[suppressed-errors.zig:4:11]
 3 │     break :blk w.print("{}", .{5});
 4 │   } catch unreachable;
   ·           ───────────
 5 │ }
   ╰────
  help: Use `try` to propagate this error. If this branch shouldn't happen, use `@panic` or `std.debug.panic` instead.

