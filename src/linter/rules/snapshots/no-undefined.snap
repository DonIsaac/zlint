  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:1:11]
 1 │ const x = undefined;
   ·           ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:1:21]
 1 │ const slice: []u8 = undefined;
   ·                     ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:1:23]
 1 │ const slice: [:0]u8 = undefined;
   ·                       ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:1:25]
 1 │ const many_ptr: [*]u8 = undefined;
   ·                         ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:1:27]
 1 │ const many_ptr: [*:0]u8 = undefined;
   ·                           ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` is missing a safety comment
   ╭─[no-undefined.zig:2:11]
 1 │ // This is not a safety comment
 2 │ const x = undefined;
   ·           ─────────
   ╰────
  help: Add a `SAFETY: <reason>` before this line explaining why this code is safe.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:2:12]
 1 │ fn foo(x: *Foo) void {
 2 │   if (x == undefined) {
   ·            ─────────
 3 │     @import("std").debug.print("x is undefined\n", .{});
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:1:32]
 1 │ fn foo(x: *Foo) void { if (x > undefined) {} }
   ·                                ─────────
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:1:33]
 1 │ fn foo(x: *Foo) void { if (x >= undefined) {} }
   ·                                 ─────────
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:1:33]
 1 │ fn foo(x: *Foo) void { if (x != undefined) {} }
   ·                                 ─────────
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:1:33]
 1 │ fn foo(x: *Foo) void { if (x <= undefined) {} }
   ·                                 ─────────
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:1:32]
 1 │ fn foo(x: *Foo) void { if (x < undefined) {} }
   ·                                ─────────
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

  𝙭 no-undefined: `undefined` cannot be used in comparisons.
   ╭─[no-undefined.zig:3:12]
 2 │   // SAFETY: this is never safe, so this comment is ignored
 3 │   if (x == undefined) {
   ·            ─────────
 4 │     @import("std").debug.print("x is undefined\n", .{});
   ╰────
  help: uninitialized data can have any value. If you need to check that a value does not exist, use `null`.

