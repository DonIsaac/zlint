  𝙭 case-convention: Function ThisFunctionIsInPascalCase name is in PascalCase. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn ThisFunctionIsInPascalCase() void {}
   ·    ──────────────────────────
   ╰────

  𝙭 case-convention: Function @"this-one-is-in-kebab-case" name is in kebab-case. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn @"this-one-is-in-kebab-case"() void {}
   ·    ────────────────────────────
   ╰────

  𝙭 case-convention: Function this_one_is_in_snake_case name is in snake_case. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn this_one_is_in_snake_case() void {}
   ·    ─────────────────────────
   ╰────

  𝙭 case-convention: Function @"This-is-both-Pascal-and-Kebab-kinda" name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn @"This-is-both-Pascal-and-Kebab-kinda"() void {}
   ·    ──────────────────────────────────────
   ╰────

  𝙭 case-convention: Function This_is_both_snake_case_and_pascal_kinda name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn This_is_both_snake_case_and_pascal_kinda() void {}
   ·    ────────────────────────────────────────
   ╰────

  𝙭 case-convention: Function This_is_both_snake_case_and_pascal_kinda name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn This_is_both_snake_case_and_pascal_kinda(a: u32, b: u32, c: u32, d: u32) void {}
   ·    ────────────────────────────────────────
   ╰────

  𝙭 case-convention: Function 'fooBar' returns a type, but does not use PascalCase
   ╭─[case-convention.zig:1:4]
 1 │ fn fooBar() type { return u32; }
   ·    ──────
   ╰────
  help: By convention, Zig uses PascalCase for structs, generics, and all other type variables.

  𝙭 case-convention: Function NotGeneric name is in PascalCase. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn NotGeneric(T: type) T { return T{}; }
   ·    ──────────
   ╰────

  𝙭 case-convention: Type parameter `t` should be in PascalCase
   ╭─[case-convention.zig:1:8]
 1 │ fn foo(t: type, x: t) t { return x; }
   ·        ─
   ╰────

  𝙭 case-convention: Type parameter `t` should be in PascalCase
   ╭─[case-convention.zig:1:17]
 1 │ fn foo(comptime t: type, x: T) t { return x; }
   ·                 ─
   ╰────

  𝙭 case-convention: Parameter `X` should be in lower_snake_case
   ╭─[case-convention.zig:1:8]
 1 │ fn foo(X: u32) u32 { return @as(u32, X); }
   ·        ─
   ╰────

  𝙭 case-convention: Type parameter `fooBar` should be in PascalCase
   ╭─[case-convention.zig:1:8]
 1 │ fn foo(fooBar: type) void { _ = fooBar; }
   ·        ──────
   ╰────

