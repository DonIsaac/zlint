  𝙭 case-convention: Function ThisFunctionIsInPascalCase name is in PascalCase. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn ThisFunctionIsInPascalCase() void {}
   ·    ──────────────────────────
   ╰────

  𝙭 case-convention: Function @"this-one-is-in-kebab-case" name is in kebab-case. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn @"this-one-is-in-kebab-case"() void {}
   ·    ────────────────────────────
   ╰────

  𝙭 case-convention: Function this_one_is_in_snake_case name is in snake_case. It should be camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn this_one_is_in_snake_case() void {}
   ·    ─────────────────────────
   ╰────

  𝙭 case-convention: Function @"This-is-both-Pascal-and-Kebab-kinda" name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn @"This-is-both-Pascal-and-Kebab-kinda"() void {}
   ·    ──────────────────────────────────────
   ╰────

  𝙭 case-convention: Function This_is_both_snake_case_and_pascal_kinda name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn This_is_both_snake_case_and_pascal_kinda() void {}
   ·    ────────────────────────────────────────
   ╰────

  𝙭 case-convention: Function This_is_both_snake_case_and_pascal_kinda name is not in camelCase
   ╭─[case-convention.zig:1:4]
 1 │ fn This_is_both_snake_case_and_pascal_kinda(a: u32, b: u32, c: u32, d: u32) void {}
   ·    ────────────────────────────────────────
   ╰────

  𝙭 case-convention: Function 'fooBar' returns a type, but does not use PascalCase
   ╭─[case-convention.zig:1:4]
 1 │ fn fooBar() type { return u32; }
   ·    ──────
   ╰────
  help: By convention, Zig uses PascalCase for structs, generics, and all other type variables.

